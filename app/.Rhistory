c=0
n=nrow(S)
z<-rep(1,ncol(S))
y0<-classify(S,z)
z_history<-z
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]%*%z))
}
for(i in 1:n){
z<-z+1/k*ifelse(y0[i]==y[i],1,0)*y[i]*c(S[i,])
}
k=k+1
z_history<-cbind(z_history,z)
c<-0
y0<-classify(S,z)
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
c
z_history
z
for(i in 1:n){
z<-z+1/k*ifelse(y0[i]==y[i],1,0)*y[i]*c(S[i,])
}
k=k+1
z_history<-cbind(z_history,z)
c<-0
y0<-classify(S,z)
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
c
k=1
c=0
n=nrow(S)
z<-rep(1,ncol(S))
y0<-classify(S,z)
z_history<-z
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]%*%z))
}
for(k in 1:200){
for(i in 1:n){
z<-z+1/k*ifelse(y0[i]==y[i],1,0)*y[i]*c(S[i,])
}
k=k+1
z_history<-cbind(z_history,z)
c[k]<-0
y0<-classify(S,z)
for(i in 1:n){
c[k]=c[k]+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
}
length(c)
plot(c(1:201),c)
k=1
c=0
n=nrow(S)
z<-rep(1,ncol(S))
y0<-classify(S,z)
z_history<-z
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]%*%z))
}
for(k in 1:200){
for(i in 1:n){
z<-z+ifelse(y0[i]==y[i],1,0)*y[i]*c(S[i,])/k
}
k=k+1
z_history<-cbind(z_history,z)
c[k]<-0
y0<-classify(S,z)
for(i in 1:n){
c[k]=c[k]+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
}
plot(c(1:201),c)
k=1
c=0
n=nrow(S)
z<-rep(1,ncol(S))
y0<-classify(S,z)
z_history<-z
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]%*%z))
}
for(k in 1:200){
for(i in 1:n){
z<-z+ifelse(y0[i]!=y[i],1,0)*y[i]*c(S[i,])/k
}
k=k+1
z_history<-cbind(z_history,z)
c[k]<-0
y0<-classify(S,z)
for(i in 1:n){
c[k]=c[k]+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
}
plot(c(1:201),c)
perceptrain<-function(S,y){
k=1
c=0
n=nrow(S)
z<-rep(1,ncol(S))
y0<-classify(S,z)
z_history<-z
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]%*%z))
}
while(c!=0){
for(i in 1:n){
z<-z+1/k*ifelse(y0[i]!=y[i],1,0)*y[i]*c(S[i,])
}
k=k+1
z_history<-cbind(z_history,z)
c<-0
y0<-classify(S,z)
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
}
return(list(z,z_history))
}
z<-c(1,2,3)
result3<-fakedata(z,100)
S3<-result3[["S"]]
y3<-result3[["y"]]
z3<-perceptrain(S3,y3)$z
z3
perceptrain(S3,y3)
perceptrain<-function(S,y){
k=1
c=0
n=nrow(S)
z<-rep(1,ncol(S))
y0<-classify(S,z)
z_history<-z
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]%*%z))
}
while(c!=0){
for(i in 1:n){
z<-z+1/k*ifelse(y0[i]!=y[i],1,0)*y[i]*c(S[i,])
}
k=k+1
z_history<-cbind(z_history,z)
c<-0
y0<-classify(S,z)
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
}
return(list(z=z,z_history=z_history))
}
z<-c(1,2,3)
result3<-fakedata(z,100)
S3<-result3[["S"]]
y3<-result3[["y"]]
z3<-perceptrain(S3,y3)$z
z3
result_test<-fakedata(z,100)
S_test<-result_test[["S"]]
y_test<-result_test[["y"]]
classify(S_test,z3)
f_test<-classify(S_test,z3)
sum(f_test==y_test)/100
plot(S3[,1],S3[,2])
?abline
abline(hypln(z3))
# Inputs
# z: a 3d vector with offset in the third dimension
# Outputs
# V_line: the line for a hyperplane perpendicular to z
library(MASS)
hypln <- function(z){
V <- Null(z[1:2])
offset <- -z[3] * z[1:2] / sum(z[1:2]^2)
x1 <- -5 + offset[1]
x2 <- 5 + offset[1]
y1 <- -5*V[2]/V[1] + offset[2]
y2 <- 5*V[2]/V[1] + offset[2]
V_line <- rbind(c(x1,y1),c(x2,y2))
return(V_line)
}
plot(S3[,1],S3[,2])
abline(hypln(z3))
plot(hypln(z3)[,2]~hypln(z3)[,1],type="l")
plot(S3[,1],S3[,2])
plot(hypln(z3)[,2]~hypln(z3)[,1],type="l",ad=T)
plot(S3[,1],S3[,2])
abline(lm(hypln(z3)[,2]~hypln(z3)[,1]))
?plot
plot(S3[,1],S3[,2],xlab = "x", ylab = "y")
abline(lm(hypln(z3)[,2]~hypln(z3)[,1]))
plot(S3[,1],S3[,2],xlab = "x", ylab = "y")
abline(lm(hypln(z3)[,2]~hypln(z3)[,1]))
plot(S3[,1],S3[,2],xlab = "x", ylab = "y")
for(i in 1:ncol(z_history)){
x<-hypln((z_history[,i]))[,1]
y<-hypln((z_history[,i]))[,2]
abline(lm(y~x))
}
ncol(z_history)
ncol(z_history)
S[,3]
S3[,3]
classify<-function(S,z){
y<-c()
for(i in 1:nrow(S)){
y[i]<-ifelse(sum(S[i,]*z)<0, -1,1)
}
return(y)
}
perceptrain<-function(S,y){
k=1
c=0
n=nrow(S)
z<-rep(1,ncol(S))
y0<-classify(S,z)
z_history<-z
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]%*%z))
}
while(c!=0){
for(i in 1:n){
z<-z+1/k*ifelse(y0[i]!=y[i],1,0)*y[i]*c(S[i,])
}
k=k+1
z_history<-cbind(z_history,z)
c<-0
y0<-classify(S,z)
for(i in 1:n){
c=c+ifelse(y0[i]!=y[i],1,0)*abs(sum(S[i,]*z))
}
}
return(list(z=z,z_history=z_history))
}
fakedata <- function(w, n){
if(! require(MASS))
{
install.packages("MASS")
}
if(! require(mvtnorm))
{
install.packages("mvtnorm")
}
require(MASS)
require(mvtnorm)
# obtain dimension
d <- length(w)-1
# compute the offset vector and a Basis consisting of w and its nullspace
offset <- -w[length(w)] * w[1:d] / sum(w[1:d]^2)
Basis <- cbind(Null(w[1:d]), w[1:d])
# Create samples, correct for offset, and extend
# rmvnorm(n,mean,sigme) ~ generate n samples from N(0,I) distribution
S <- rmvnorm(n, mean=rep(0,d),sigma = diag(1,d)) %*%  t(Basis)
S <- S + matrix(rep(offset,n),n,d,byrow=T)
S <- cbind(S,1)
# compute the class assignments
y <- as.vector(sign(S %*% w))
# add corrective factors to points that lie on the hyperplane.
S[y==0,1:d] <- S[y==0,1:d] + runif(1,-0.5,0.5)*10^(-4)
y = as.vector(sign(S %*% w))
return(list(S=S, y=y))
}
# to generate a new three-dimensional random vector z
z<-c(1,2,3)
# to run fakedata(z,100) to generate a training
result3<-fakedata(z,100)
S3<-result3[["S"]]
y3<-result3[["y"]]
# to train my Perceptron on the set
z3<-perceptrain(S3,y3)$z
fakedata <- function(w, n){
if(! require(MASS))
{
install.packages("MASS")
}
if(! require(mvtnorm))
{
install.packages("mvtnorm")
}
require(MASS)
require(mvtnorm)
# obtain dimension
d <- length(w)-1
# compute the offset vector and a Basis consisting of w and its nullspace
offset <- -w[length(w)] * w[1:d] / sum(w[1:d]^2)
Basis <- cbind(Null(w[1:d]), w[1:d])
# Create samples, correct for offset, and extend
# rmvnorm(n,mean,sigme) ~ generate n samples from N(0,I) distribution
S <- rmvnorm(n, mean=rep(0,d),sigma = diag(1,d)) %*%  t(Basis)
S <- S + matrix(rep(offset,n),n,d,byrow=T)
S <- cbind(S,1)
# compute the class assignments
y <- as.vector(sign(S %*% w))
# add corrective factors to points that lie on the hyperplane.
S[y==0,1:d] <- S[y==0,1:d] + runif(1,-0.5,0.5)*10^(-4)
y = as.vector(sign(S %*% w))
return(list(S=S, y=y))
}
z<-c(1,2,3)
result3<-fakedata(z,100)
S3<-result3[["S"]]
y3<-result3[["y"]]
plot(S3[,1],S3[,2],xlab = "x", ylab = "y",color=as.factor(S3[,3]))
plot(S3[,1],S3[,2],xlab = "x", ylab = "y",col=S3[,3])
plot(S3[,1],S3[,2],xlab = "x", ylab = "y",col=as.factor(S3[,3]))
S[,3]
S3[,3]
plot(S3[,1],S3[,2],xlab = "x", ylab = "y",col=,color=y3)
plot(S3[,1],S3[,2],xlab = "x", ylab = "y",col==y3)
plot(S3[,1],S3[,2],xlab = "x", ylab = "y",col=y3)
plot(S3[,1],S3[,2],xlab = "x", ylab = "y",col=as.factor(y3))
fakedata <- function(w, n){
if(! require(MASS))
{
install.packages("MASS")
}
if(! require(mvtnorm))
{
install.packages("mvtnorm")
}
require(MASS)
require(mvtnorm)
# obtain dimension
d <- length(w)-1
# compute the offset vector and a Basis consisting of w and its nullspace
offset <- -w[length(w)] * w[1:d] / sum(w[1:d]^2)
Basis <- cbind(Null(w[1:d]), w[1:d])
# Create samples, correct for offset, and extend
# rmvnorm(n,mean,sigme) ~ generate n samples from N(0,I) distribution
S <- rmvnorm(n, mean=rep(0,d),sigma = diag(1,d)) %*%  t(Basis)
S <- S + matrix(rep(offset,n),n,d,byrow=T)
S <- cbind(S,1)
# compute the class assignments
y <- as.vector(sign(S %*% w))
# add corrective factors to points that lie on the hyperplane.
S[y==0,1:d] <- S[y==0,1:d] + runif(1,-0.5,0.5)*10^(-4)
y = as.vector(sign(S %*% w))
return(list(S=S, y=y))
}
z<-c(1,2,3)
result3<-fakedata(z,100)
S3<-result3[["S"]]
y3<-result3[["y"]]
S3
z<-c(1,2,3)
result3<-fakedata(z,100)
S3<-result3[["S"]]
y3<-result3[["y"]]
S3
e^(-0.03)
exp(-0.03)
exp(0.03)
exp(0.03)-1
1-exp(-0.03)
exp(-0.03)
exp(0.03)
1-exp(-0.03)
u1<-1-exp(-0.01)
u2<-1-exp(-0.02)
c<-exp(-((-log(u1))^2+(-log(u2))^2)^(1/2))
c
u1
exp(-0.01)+exp(-0.02)-c
u1+u2-c
c*100000
c*1000000
c1<-exp(-((-log(u1))+(-log(u2)))^(1))
c1*1000000
c1
-1000000*(-1.28*0.015^2+0.001)
-1.28*0.015^
2
-1000000*(-1.28*0.015+0.001)
-1000*(-1.645*0.2+0.1)
-1000*(-1.886*0.015+0.001)
-1000*(-1.476*0.015+0.001)
1000000* (0.15 × 1.64 − 0.05)
1000000*(0.15 × 1.64 − 0.05)
1000000*(0.15 * 1.64 − 0.05)
1000000*(0.15 * 1.64 - 0.05)
1000000*(0.15 * 2.015 - 0.05)
1000000*(0.15 * 1.28 - 0.05)
1000*(0.2 * 1.64 - 0.1)
1000*(0.015 * 1.476 - 0.001)
1000*(0.015 * 1.886 - 0.001)
mu<-1/3*0.01+2/3*0.05
sigma_2<-1/9*0.05^2+4/9*0.01^2
z<-1.64
p<-1500
var<-p*(sqrt(sigma_2)*z-mu)
var
sigma_2<-1/9*0.05^2+4/9*0.01^2
sqrt(sigma_2)
1/9*0.05^2
0.05^2/9
mu<-1/3*0.01+2/3*0.05
sigma_2<-1/9*0.05^2 + 4/9*0.01^2+2*2/9*0.01*0.05*0.3
z<-1.64
p<-1500
var<-p*(sqrt(sigma_2)*z-mu)
var
-p*(mu+1.64*sqrt(sigma_2))
100000*(0.04+0.18*1.64)
1/9*0.05^2 + 4/9*0.01^2
0.0025／9+0.0004/9
0.0025/9+0.0004/9
0.0025/9+0.0004/9
1/9*0.05^2 + 4/9*0.01^2
var<-p*(sqrt(sigma_2)*z-mu)
var
-p*(mu+1.64*sqrt(sigma_2))
p*(mu+1.64*sqrt(sigma_2))
sigma_2<-1/9*0.05^2 + 4/9*0.01^2+2*2/9*0.01*0.05*0.3
z<-1.64
p<-1500
var<-p*(sqrt(sigma_2)*z-mu)
var
s<-1/9*0.05^2 + 4/9*0.01^2
s
sqrt(s)
mu<-1/3*0.01+2/3*0.05
mu
mu<-1/3*0.01+2/3*0.005
mu
s<-1/9*0.05^2 + 4/9*0.01^2
z<-1.64
p<-1500
p*(sqrt(s)*z-mu)
sqrt(s)
sigma_2<-1/9*0.05^2 + 4/9*0.01^2+2*2/9*0.01*0.05*0.3
p*(sqrt(sigma_2)*z-mu)
sigma_2<-1/9*0.05^2 + 4/9*0.01^2-2*2/9*0.01*0.05*0.3
p*(sqrt(sigma_2)*z-mu)
1000000*（0.015*1.28-0.01）
1000000*(0.015*1.28-0.01)
1000000*(0.015*1.28-0.001)
mu
mu<-1/3*0.01+2/3*0.005
mu
s<-1/9*0.05^2 + 4/9*0.01^2
s
-0.035211763+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
-0.025409+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
0.02*6.55
-0.025409+2*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
-0.025409+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
0.02*6.55
-0.025409+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.0228
-0.025409+2*100*(-45.0225137)+1/2*30^2*100^2*0.0228
-0.025409+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
-0.025409+0.02*100*(-0.450225137)+1/2*0.3*100^2*0.023213862
-0.025409+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
exp(0.05)*50
sqrt(e^(0.2+0.04*(e^0.04-1)))
sqrt(exp(0.2+0.04*(exp(0.04)-1)))
-0.025409+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
-2^2
50*sqrt(exp(0.1)*(exp(0.5*0.04)-1))
2500*exp(0.1)*(exp(0.1)-1)
sqrt(2500*exp(0.1)*(exp(0.1)-1))
sqrt(2500*exp(0.1)*(exp(0.02)-1))
2500*exp(0.1)*(exp(0.02)-1)
-0.025409+0.02*100*(-0.450225137)+1/2*0.3^2*100^2*0.023213862
50*exp(0.05)
ee<-exp(-0.11/12)
10-9*ee
1.082123-(20-20*ee)
(20*exp(0.11/12)-18)
(20*exp(0.11/12)-18)/4
p<-(20*exp(0.11/12)-18)/4
(22*p+18-18*p)*ee
(2-2*p)*ee
50000+2000*65.230003+3000*29.77-750*234.029999
(50000+2000*65.230003+3000*29.77-750*234.029999)/ 94247.51
(2000*65.230003+3000*29.77-750*234.029999)/ 94247.51
(2000*65.230003+3000*29.77+750*234.029999)/ 94247.51
-3/7*log(3/7)/log(2)-4/7*log(4/7)/log(2)
3/7*(-0.6*log(0.6)/log(2)-0.4*log(0.4)/log(2))+4/7*(-0.3*log(0.3)/log(2)-0.7*log(0.7)/log(2))
exp(-1)
exp(-2)
exp(-4)
exp(-1)*exp(-2)*exp(-4)
8*exp(-2)*exp(-4)*exp(-8)
0.2/(0.2+0.13/2)
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
setwd("~/Google Drive/Course | ADS/Project 2/Fall2017-project2-grp5/app")
shiny::runApp()
runApp()
setwd("~/Documents/GitHub/Fall2017-project2-grp5/app")
runApp('~/Google Drive/Course | ADS/Project 2/Fall2017-project2-grp5/app')
setwd("~/Documents/GitHub/Fall2017-project2-grp5/app")
runApp()
setwd("~/Google Drive/Course | ADS/Project 2/Fall2017-project2-grp5/app")
runApp()
setwd("~/Documents/GitHub/Fall2017-project2-grp5/app")
runApp()
setwd("~/Documents/GitHub/Fall2017-project2-grp5/app")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
